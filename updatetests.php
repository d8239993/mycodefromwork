function generatePerformanceReport($studentId, $page = 1, $pageSize = 10) {
    try {
        // Подключаем HL-блок по ID (в данном случае с ID = 1).
        // HL-блок используется для хранения данных с результатами тестов.
        $hlBlock = HL\Block::getById(1); // Получаем HL-блок по его ID
        if (!$hlBlock) {
            // Если HL-блок с таким ID не найден, выбрасываем исключение.
            throw new Exception("HL-блок с таким ID не найден");
        }

        // Рассчитываем сдвиг данных для пагинации.
        // Параметры пагинации: на какой странице мы находимся ($page) и сколько записей нужно показывать на одной странице ($pageSize).
        // Рассчитываем индекс начальной записи для текущей страницы.
        $start = ($page - 1) * $pageSize;

        // Выполняем запрос к HL-блоку, получая данные для конкретного студента.
        // В запросе используется фильтрация по STUDENT_ID, чтобы выбрать только данные для нужного студента.
        // Кроме того, данные сортируются по дате (в порядке убывания) и ограничиваются количеством, заданным в пагинации.
        $result = $hlBlock->getList(array(
            'filter' => array('STUDENT_ID' => $studentId), // Фильтруем данные по ID студента
            'select' => array('RESULTS', 'DATE'), // Выбираем только нужные поля для отчета
            'order' => array('DATE' => 'DESC'), // Сортируем по дате в убывающем порядке (от новых к старым)
            'limit' => $pageSize, // Ограничиваем количество записей на странице
            'offset' => $start // Определяем, с какой записи начинать вывод данных
        ));

        // Если результат запроса пустой, выбрасываем исключение.
        if (!$result) {
            throw new Exception("Ошибка при запросе данных.");
        }

        // Массив для хранения данных отчета.
        // Каждая строка из результата будет добавлена в этот массив.
        $reportData = [];
        while ($row = $result->fetch()) {
            // Добавляем каждую строку результата в массив $reportData.
            // Каждая строка содержит результаты тестов и дату.
            $reportData[] = $row;
        }

        // Возвращаем собранные данные отчета.
        return $reportData;
    } catch (Exception $e) {
        // Обработка ошибок: если возникла ошибка, возвращаем сообщение об ошибке.
        // Это позволит обработать ошибки в интерфейсе пользователя, например, отобразив сообщение.
        return ['error' => $e->getMessage()];
    }
}
